theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_x_discrete(labels=c("APOE3","APOE4"),
expand=c(0.1, 0.1)) +
labs(x = "", y = "Expression", title = gene)
return(p)
}
# Model matrix
design = model.matrix(~0+groups)
colnames(design) = levels(groups)
# Estimate dispersion
expr <- estimateDisp(expr, design, robust=T)
# Contrast for tests
my.contrast = makeContrasts(APOE3vs4.F = APOE4.F-APOE3.F,
APOE3vs4.M = APOE4.M-APOE3.M,
APOE3vs4.FvsM = (APOE4.F-APOE3.F) - (APOE4.M-APOE3.M),
levels = design)
# Differential Expression Analysis: APOE in males
# -----------------------------------------------
# Fit glm for quasi-likelihood
fit <- glmQLFit(expr, design, expr$tagwise.dispersion)
# Run tests for hAPOE4 in males
DEGinMales = myTest(fit, my.contrast[,'APOE3vs4.M'])
knitr::opts_chunk$set(echo = TRUE)
library(biomaRt)
library(tximport)
library(edgeR)
library(ggplot2)
library(amap)
library(dplyr)
library(gridExtra)
library(org.Mm.eg.db)
library(pheatmap)
library(statmod)
library(umap)
library(NMF)
library(factoextra)
## Load data from gene_data.rdata
load('gene_data.rdata')
genotype = samples[,2]
sex = samples[,3]
groups = samples[,4]
mm = useMart("ensembl",
dataset = "mmusculus_gene_ensembl")
## Create dgList object
## cts = read.table("GSE.txt", sep = ",", header = T, row.names = 1)
expr <- DGEList(counts = cts, group = colnames(cts))
## Keeps genes with minimum cpm of 1 in at least 2 samples in at least one group
countCheck <- (cpm(expr) >= 1)
countCheck = lapply(0:3, function(x)
rowSums(countCheck[, x*5 + c(1:5)]) >= 2)
countCheck = Reduce('+', countCheck)
expr <- expr[which(countCheck > 0), ] # 15983 genes left
## TMM normalization
expr <- calcNormFactors(expr, method="TMM")
# Data Visualization after filtering
plotMD(cpm(expr, log=TRUE), column=1)
abline(h=0, col="red", lty=2, lwd=2)
mycolor = c("#EF8A62", "#FDDBC7", "#67A9CF", "#D1E5F0")
# Data Exploration
# -----------------------------------------------
myMDS = function(expr, method, title=" ") {
logexpr = cpm(expr, log=T)
D = Dist(t(logexpr), method = method)
# Convert distance to mds coordinates
coords = data.frame(cmdscale(D), groups)
colnames(coords) = c("Dim.1", "Dim.2", "groups")
# Plot samples on principle coordinates (MDS)
ggplot(coords) +
geom_point(aes(Dim.1, Dim.2, group = groups, color = groups), size=3) +
theme_classic() +
geom_hline(yintercept = 0, linetype = 3) +
geom_vline(xintercept = 0, linetype = 3) +
labs(title = paste0('MDS Plot of Log-folded CPM ', title)) +
theme(axis.line.y = element_blank(),
axis.line.x = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "right") +
scale_color_manual(values = mycolor)
}
myMDS(expr, "pearson")
# Detect interaction effect
# -----------------------------------------------
# Construct subgroups for sex = male and sex = female & model matrix
females = expr[, c(1:5, 11:15)]
males = expr[, c(6:10, 16:20)]
design = c(rep("APOE3", 5), rep("APOE4", 5))
design = model.matrix(~design)
# Estimate dispersion (within-group variation) seperately
females <- estimateDisp(females, design, robust=T)
males <- estimateDisp(males, design, robust=T)
# Run differential expression analysis respectively
femalesCoef <- glmQLFit(females, design, females$tagwise.dispersion)$coefficients
malesCoef <- glmQLFit(males, design, males$tagwise.dispersion)$coefficients
# Plot regression coefficients for males/females
ggplot() +
geom_point(aes(1:nrow(femalesCoef),
femalesCoef[,2],
group = 'female',
color = "female")) +
geom_point(aes(1:nrow(malesCoef),
malesCoef[,2],
group = 'male',
color = "male")) +
theme_classic() +
labs(x = "Genes",
y = "Coefficients of APOE",
title = "Coefficients of APOE3/4 in Males/Females Samples") +
scale_color_manual(values = c('female' = mycolor[1],
'male' = mycolor[3]),
name = "Sex") +
theme(plot.title = element_text(hjust = 0.5))
# Differential Expression Analysis: Preparation
# -----------------------------------------------
# Function for regression and test
myTest = function(fit, contrast, p.value=0.05, n=2000) {
# Run quasi-likelihood test
lrt <- glmQLFTest(fit, contrast = contrast)
#print(summary(decideTests(lrt, p.value=p.value)))
# Pick genes with fdr p-value greatee than our thresold
tops = topTags(lrt, n=n, p.value=p.value)$table
# Find names of top_genes
top_gene_name = getBM(filters= "ensembl_gene_id",
attributes = c('ensembl_gene_id', 'external_gene_name'),
values = rownames(tops),
mart = mm)
colnames(top_gene_name) = c("gene_id", "gene_names")
# Return names of differentially expressed genes and there fdr adjusted p-values
result <- data.frame(gene = as.character(rownames(tops)),
p.value = tops$PValue,
logFC = tops$logFC)
result = left_join(result, top_gene_name, by = c('gene' = 'gene_id'))
return (result)
}
myBarplot = function(df, sex, gene) {
p = ggplot(df) +
geom_bar(aes_string(1:10, gene, group = 'group', fill = 'group'),
stat = 'identity') +
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "right") +
labs(x = paste0(sex, " Samples"),
y = paste0("Expression level of ", gene)) +
scale_fill_manual(values = c('APOE3' = mycolor[2],
'APOE4' = mycolor[4]),
name = "") +
coord_flip()
return(p)
}
myLineplot = function(df, gene) {
p = ggplot(mapping = aes_string('APOE', gene, group = 'sex', color = 'sex'),
mean_inter_expr) +
geom_point() +
geom_line(aes(linetype = sex), size = 1) +
theme_classic() +
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_x_discrete(labels=c("APOE3","APOE4"),
expand=c(0.1, 0.1)) +
labs(x = "", y = "Expression", title = gene)
return(p)
}
# Model matrix
design = model.matrix(~0+groups)
colnames(design) = levels(groups)
# Estimate dispersion
expr <- estimateDisp(expr, design, robust=T)
# Contrast for tests
my.contrast = makeContrasts(APOE3vs4.F = APOE4.F-APOE3.F,
APOE3vs4.M = APOE4.M-APOE3.M,
APOE3vs4.FvsM = (APOE4.F-APOE3.F) - (APOE4.M-APOE3.M),
levels = design)
# Differential Expression Analysis: APOE in males
# -----------------------------------------------
# Fit glm for quasi-likelihood
fit <- glmQLFit(expr, design, expr$tagwise.dispersion)
# Run tests for hAPOE4 in males
DEGinMales = myTest(fit, my.contrast[,'APOE3vs4.M'])
# Show results
head(DEGinMales)
cat(paste(DEGinMales$gene, collapse = '\n'))
# Find their corresponding expression levels of Ica1, Serpina3n and Oscar
idx_males = sapply(DEGinMales$gene[c(2:4, 6)], function(x) which(rownames(males$counts) == x))
top_male_expr = as.data.frame(t(males$counts[idx_males, ]))
colnames(top_male_expr) = DEGinMales$gene_names[c(2:4, 6)]
top_male_expr$group = c(rep('APOE3', 5), rep('APOE4', 5))
top_male_expr
# Plot the expression of these three genes
ica1_male = myBarplot(top_male_expr, 'Male', 'Ica1')
serpina3n_male = myBarplot(top_male_expr, 'Male', 'Serpina3n')
oscar_male = myBarplot(top_male_expr, 'Male', 'Oscar')
dock10_male = myBarplot(top_male_expr, 'Male', 'Dock10')
grid.arrange(ica1_male + theme(legend.position="none"),
serpina3n_male + theme(legend.position="none"),
oscar_male,
nrow = 3)
# Differential Expression Analysis: hAPOE in females
# -----------------------------------------------
DEGinFemales = myTest(fit, my.contrast[,'APOE3vs4.F'])
# Show results
head(DEGinFemales, 10)
head(DEGinMales, 10)
# Find their corresponding expression levels of Ica1, Serpina3n and Oscar
idx_females = sapply(DEGinFemales$gene[c(2:4)],
function(x) which(rownames(females$counts) == x))
top_female_expr = as.data.frame(t(females$counts[idx_females, ]))
colnames(top_female_expr) = DEGinFemales$gene_names[c(2:4)]
top_female_expr$group = c(rep('APOE3', 5), rep('APOE4', 5))
top_female_expr
top_male_expr
# Plot the expression of these three genes
ica1_female = myBarplot(top_female_expr, 'Female', 'Ica1')
serpina3n_female = myBarplot(top_female_expr, 'Female', 'Serpina3n')
oscar_female = myBarplot(top_female_expr, 'Female', 'Oscar')
grid.arrange(ica1_female + theme(legend.position="none"),
serpina3n_female + theme(legend.position="none"),
oscar_female,
nrow = 3,
top = "")
# How APOE4 differentially influences males and females?
# -----------------------------------------------
# Run myTest
DEGinteraction = myTest(fit, my.contrast[,'APOE3vs4.FvsM'])
# Show results
DEGinteraction
# Find their corresponding expression levels of Ica1, Serpina3n and Oscar
idx_inter = sapply(DEGinteraction$gene[c(6:10, 12)],
function(x) which(rownames(expr$counts) == x))
top_inter_expr = as.data.frame(t(expr$counts[idx_inter, ]))
colnames(top_inter_expr) = DEGinteraction$gene_names[c(6:10, 12)]
top_inter_expr$group = sapply(rownames(top_inter_expr),
function(x) substr(x, 1, 7))
top_inter_expr
# Mean expression grouped by group
mean_inter_expr = top_inter_expr %>%
group_by(group) %>%
summarise(Rfpl4 = mean(Rfpl4),
Dock10 = mean(Dock10),
Sall4 = mean(Sall4),
Olfr907 = mean(Olfr907),
Cks2 = mean(Cks2),
Nlrp4f = mean(Nlrp4f)) %>%
mutate(sex = c('F', 'M', 'F', 'M'),
APOE = c('APOE3', 'APOE3', 'APOE4', 'APOE4'))
# Visualization of Rfpl4, Dock10, Sall4
rfpl4 = myLineplot(mean_inter_expr, 'Rfpl4')
dock10 = myLineplot(mean_inter_expr, 'Dock10')
sall4 = myLineplot(mean_inter_expr, 'Sall4')
olfr907 = myLineplot(mean_inter_expr, 'Olfr907')
cks2 = myLineplot(mean_inter_expr, 'Cks2')
nlrp4f = myLineplot(mean_inter_expr, 'Nlrp4f')
grid.arrange(rfpl4, dock10, sall4, olfr907, nrow = 2)
# Differential Expression of APOE4 over APOE3 in Males/Females"
my.glm = function(expr, my.contrast, dispersion, p.value=0.05, n=2000) {
fit <- glmQLFit(expr, design, dispersion)
lrt <- glmQLFTest(fit, contrast=my.contrast)
#print(summary(decideTests(lrt, p.value=p.value)))
degs <- rownames(topTags(lrt, n=n, p.value=p.value)$table)
return (degs)
}
# Fit glm model to see the effect the different dispersion
# degs.commom = myTest(expr, my.contrast[,'APOE3vs4.F'], common.dispersion)
# degs.trended = myTest(expr, my.contrast[,'APOE3vs4.F'], trended.dispersion)
degs = my.glm(expr, my.contrast[,'APOE3vs4.F'], expr$tagwise.dispersion)
# Estimate dispersion (within-group variation)
expr <- estimateDisp(expr, design, robust=T)
# Fit glm model to see the effect the different dispersion
degs.commom = my.glm(expr, my.contrast[,'APOE3vs4.F'], expr$common.dispersion)
degs.trended = my.glm(expr, my.contrast[,'APOE3vs4.F'], expr$trended.dispersion)
degs.tagwise = my.glm(expr, my.contrast[,'APOE3vs4.F'], expr$tagwise.dispersion)
myMDS(expr[degs.commom,], "pearson", title='(common.dispersio)')
myMDS(expr[degs.trended,], "pearson", title='(trended.dispersion)')
myMDS(expr[degs.tagwise,], "pearson", title='(tagwise.dispersion)')
# show top 5 genes with counts and external_gene_name
show_top_gene = function(degs) {
## Get mapping ensembl_gene_id to external_gene_name
mm = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
top_gene = degs[1:5]
top_gene_name = getBM(filters= "ensembl_gene_id",
attributes=c('ensembl_gene_id', 'external_gene_name'),
values=top_gene,mart=mm)
top_expr = expr$counts[which(rownames(expr) %in% top_gene), ]
tbl = merge(top_gene_name,top_expr,by.x='ensembl_gene_id',by.y='row.names')
rownames(tbl) = tbl$external_gene_name
tbl = subset(tbl,select=-c(ensembl_gene_id,external_gene_name))
kable(t(tbl))
}
# union all the DE genes
degs_union = Reduce(union, list(DEGinFemales$gene, DEGinMales$gene, DEGinteraction$gene))
# Enrichment Analysis
## top genes for DAVID, 193/307 identified
write.table(degs_union,file='top_genes.txt',row.names=F,col.names=F,quote=F)
# hierarchical clustering
# -----------------------------------------------
set.seed(0)
expr.log = cpm(expr, log = TRUE)
## select genes at 0.1 significance level
expr.top = expr.log[degs_union, ]
expr.top.scale = scale(t(expr.top))
res = pheatmap(expr.top.scale,
cluster_rows = T,
cluster_cols = F,
cluster_distance_rows = "correlation",
show_rownames = T,
show_colnames = F)
## cut tree
clust <- cutree(res$tree_row, k = 4)
table(clust, groups)
# UMAP
# -----------------------------------------------
expr.log.t = t(expr.log)
um = umap(expr.log.t)
df = data.frame(x = um$layout[,1],
y = um$layout[,2],
groups = groups)
df$cluster = as.factor(clust)
ggplot(data = df,
mapping = aes(x = x,
y = y,
shape = groups,
color = cluster)) +
geom_point(size = 5)
# PCA
# -----------------------------------------------
pca_out <- prcomp(expr.log.t, center = TRUE, scale = TRUE, retx=TRUE)
fviz_eig(pca_out, geom = "bar", bar_width = 0.4) + ggtitle("")
fviz_pca_ind(pca_out,
geom = "point",
pointsize = 4,
habillage = groups,
palette = "npg",
mean.point = FALSE)
# Gene Ontology Analysis: Revigo
# -----------------------------------------------
Symbol <- mapIds(org.Mm.eg.db, keys=rownames(expr), keytype="ENSEMBL",column="ENTREZID")
Symbol[which(duplicated(Symbol))] = names(Symbol)[which(duplicated(Symbol))]
Symbol[which(is.na(Symbol))] = names(Symbol)[which(is.na(Symbol))]
fit <- glmFit(expr, design, tagwise.dispersion)
# Gene Ontology Analysis: Revigo
# -----------------------------------------------
Symbol <- mapIds(org.Mm.eg.db, keys=rownames(expr), keytype="ENSEMBL",column="ENTREZID")
Symbol[which(duplicated(Symbol))] = names(Symbol)[which(duplicated(Symbol))]
Symbol[which(is.na(Symbol))] = names(Symbol)[which(is.na(Symbol))]
fit <- glmFit(expr, design, expr$tagwise.dispersion)
lrt <- glmLRT(fit, contrast=my.contrast[,'APOE3vs4.FvsM'])
lrt.symbol = lrt
#lrt.symbol$genes = data.frame(Symbol=Symbol)
rownames(lrt.symbol) = Symbol
go <- goana(lrt.symbol, species = "Mm")
topgo = topGO(go, n=300, sort='Down', truncate=20)
revigo = data.frame(rownames(topgo),topgo$P.Down)
head(topgo,5)
write.table(revigo, file='revigo.txt',row.names=F,col.names=F,quote=F)
# Choice of normalization
# -----------------------------------------------
par(mfrow = c(3, 1))
hist(rowMeans(expr$count),
main = "Histogram of Raw Mean Expression of Genes",
xlab = "Expression")
hist(log(rowMeans(expr$count), 2),
main = "Histogram of Log2-folded Mean Expression of Genes",
xlab = "Log2(Expression)")
hist(log(rowMeans(expr$count)),
main = "Histogram of Nature-log-folded Mean Expression of Genes",
xlab = "Ln(Expression)")
# Differential Expression Analysis: APOE in males
# -----------------------------------------------
# Fit glm for quasi-likelihood
fit <- glmQLFit(expr, design, expr$tagwise.dispersion)
# Run tests for hAPOE4 in males
DEGinMales = myTest(fit, my.contrast[,'APOE3vs4.M'])
# Show results
head(DEGinMales)
# cat(paste(DEGinMales$gene, collapse = '\n'))
# Find their corresponding expression levels of Ica1, Serpina3n and Oscar
idx_males = sapply(DEGinMales$gene[c(2:4, 6)], function(x) which(rownames(males$counts) == x))
top_male_expr = as.data.frame(t(males$counts[idx_males, ]))
colnames(top_male_expr) = DEGinMales$gene_names[c(2:4, 6)]
top_male_expr$group = c(rep('APOE3', 5), rep('APOE4', 5))
# top_male_expr
# Plot the expression of these three genes
ica1_male = myBarplot(top_male_expr, 'Male', 'Ica1')
serpina3n_male = myBarplot(top_male_expr, 'Male', 'Serpina3n')
oscar_male = myBarplot(top_male_expr, 'Male', 'Oscar')
dock10_male = myBarplot(top_male_expr, 'Male', 'Dock10')
grid.arrange(ica1_male + theme(legend.position="none"),
serpina3n_male + theme(legend.position="none"),
oscar_male,
nrow = 3)
# Differential Expression Analysis: Preparation
# -----------------------------------------------
# Function for regression and test
myTest = function(fit, contrast, p.value=0.05, n=2000) {
# Run quasi-likelihood test
lrt <- glmQLFTest(fit, contrast = contrast)
#print(summary(decideTests(lrt, p.value=p.value)))
# Pick genes with fdr p-value greatee than our thresold
tops = topTags(lrt, n=n, p.value=p.value)$table
# Find names of top_genes
top_gene_name = getBM(filters= "ensembl_gene_id",
attributes = c('ensembl_gene_id', 'external_gene_name'),
values = rownames(tops),
mart = mm)
colnames(top_gene_name) = c("gene_id", "gene_names")
# Return names of differentially expressed genes and there fdr adjusted p-values
result <- data.frame(gene = as.character(rownames(tops)),
p.value = tops$PValue,
logFC = tops$logFC)
result = left_join(result, top_gene_name, by = c('gene' = 'gene_id'))
return (result)
}
myBarplot = function(df, sex, gene) {
p = ggplot(df) +
geom_bar(aes_string(1:10, gene, group = 'group', fill = 'group'),
stat = 'identity') +
theme_classic() +
theme(axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "right") +
labs(x = paste0(sex, " Samples"),
y = paste0("Expression level of ", gene)) +
scale_fill_manual(values = c('APOE3' = mycolor[2],
'APOE4' = mycolor[4]),
name = "") +
coord_flip()
return(p)
}
myLineplot = function(df, gene) {
p = ggplot(mapping = aes_string('APOE', gene, group = 'sex', color = 'sex'),
mean_inter_expr) +
geom_point() +
geom_line(aes(linetype = sex), size = 1) +
theme_classic() +
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_x_discrete(labels=c("APOE3","APOE4"),
expand=c(0.1, 0.1)) +
labs(x = "", y = "Expression", title = gene)
return(p)
}
# Model matrix
design = model.matrix(~0+groups)
colnames(design) = levels(groups)
# Estimate dispersion
expr <- estimateDisp(expr, design, robust=T)
# Contrast for tests
my.contrast = makeContrasts(APOE3vs4.F = APOE4.F-APOE3.F,
APOE3vs4.M = APOE4.M-APOE3.M,
APOE3vs4.FvsM = (APOE4.F-APOE3.F) - (APOE4.M-APOE3.M),
levels = design)
# Differential Expression Analysis: APOE in males
# -----------------------------------------------
# Fit glm for quasi-likelihood
fit <- glmQLFit(expr, design, expr$tagwise.dispersion)
# Run tests for hAPOE4 in males
DEGinMales = myTest(fit, my.contrast[,'APOE3vs4.M'])
# Show results
head(DEGinMales)
# cat(paste(DEGinMales$gene, collapse = '\n'))
# Find their corresponding expression levels of Ica1, Serpina3n and Oscar
idx_males = sapply(DEGinMales$gene[c(2:4, 6)], function(x) which(rownames(males$counts) == x))
top_male_expr = as.data.frame(t(males$counts[idx_males, ]))
colnames(top_male_expr) = DEGinMales$gene_names[c(2:4, 6)]
top_male_expr$group = c(rep('APOE3', 5), rep('APOE4', 5))
# top_male_expr
# Plot the expression of these three genes
ica1_male = myBarplot(top_male_expr, 'Male', 'Ica1')
serpina3n_male = myBarplot(top_male_expr, 'Male', 'Serpina3n')
oscar_male = myBarplot(top_male_expr, 'Male', 'Oscar')
dock10_male = myBarplot(top_male_expr, 'Male', 'Dock10')
grid.arrange(ica1_male + theme(legend.position="none"),
serpina3n_male + theme(legend.position="none"),
oscar_male,
nrow = 3)
# Differential Expression Analysis: hAPOE in females
# -----------------------------------------------
DEGinFemales = myTest(fit, my.contrast[,'APOE3vs4.F'])
# Show results
head(DEGinFemales, 10)
head(DEGinMales, 10)
# Find their corresponding expression levels of Ica1, Serpina3n and Oscar
idx_females = sapply(DEGinFemales$gene[c(2:4)],
function(x) which(rownames(females$counts) == x))
top_female_expr = as.data.frame(t(females$counts[idx_females, ]))
colnames(top_female_expr) = DEGinFemales$gene_names[c(2:4)]
top_female_expr$group = c(rep('APOE3', 5), rep('APOE4', 5))
top_female_expr
top_male_expr
# Plot the expression of these three genes
ica1_female = myBarplot(top_female_expr, 'Female', 'Ica1')
serpina3n_female = myBarplot(top_female_expr, 'Female', 'Serpina3n')
oscar_female = myBarplot(top_female_expr, 'Female', 'Oscar')
grid.arrange(ica1_female + theme(legend.position="none"),
serpina3n_female + theme(legend.position="none"),
oscar_female,
nrow = 3,
top = "")
DEGinteraction[1:10]
# How APOE4 differentially influences males and females?
# -----------------------------------------------
# Run myTest
DEGinteraction = myTest(fit, my.contrast[,'APOE3vs4.FvsM'])
# Show results
DEGinteraction[1:10]
DEGinteraction$counts[1:10]
DEGinteraction = myTest(fit, my.contrast[,'APOE3vs4.FvsM'])
DEGinteraction$gene[1:10]
DEGinteraction[1:10]
DEGinteraction[1:10,]
